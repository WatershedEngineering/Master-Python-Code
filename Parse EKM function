def readEKM(EKMport):

	def parse_EKM(response): #takes the response and parses it

		d = {}	#starts the dictionary

		def floatize(string): #function for turning string
			length = len(string) #calculates the length of the string
			newstring = string[:-2] + "." + string[length-1:length] #inserts decimal point
			return newstring 
	
		d["Address"]= response[11:16] #12
		d["Total kWh"] = floatize(response[16:24]) #8
		d["T1 kWh"] = floatize(response[24:32]) #8
		d["T2 kWh"] = floatize(response[32:40]) #8
		d["T3 kWh"] = floatize(response[40:48]) #8
		d["T4 kWh"] = floatize(response[48:56]) #8
		d["Tot Rev kWh"] = floatize(response[56:64]) #8
		d["T1 Rev kWh"] = floatize(response[64:72]) #8
		d["T2 Rev kWh"] = floatize(response[72:80]) #8
		d["T3 Rev kWh"] = floatize(response[80:88]) #8
		d["T4 Rev kWh"] = floatize(response[88:96]) #8
		d["V1"] = floatize(response[96:100]) #4
		d["V2"] = floatize(response[100:104]) #4
		d["V3"] = floatize(response[104:108]) #4
		d["A1"] = floatize(response[108:112]) #4
		d["A2"] = floatize(response[112:116]) #4
		d["A3"] = floatize(response[116:120]) #4
		d["Total Power"] = floatize(response[120:126]) #6
		d["P1"] = floatize(response[126:132]) #6
		d["P2"] = floatize(response[132:138]) #6
		d["P3"] = floatize(response[138:144]) #6
		return d #returns the dictionary
		
	ser=serial.Serial(EKMport,baudrate=9600,parity=serial.PARITY_EVEN,bytesize=serial.SEVENBITS) #setting up serial
	sequence = '\x2F\x3F\x00\x00\x00\x00\x00\x00\x00\x01\x04\x05\x01\x02\x0D\x0A" #sending the request sequence
	ser.write(sequence) #writes the request sequence
	response = ser.readline() #assigns the response a variable
	return parse_EKM(response) #returns the dictionary
	
